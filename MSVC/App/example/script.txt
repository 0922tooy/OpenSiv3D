Image CreateSquareImage()
{
	const Image image("example/windmill.png");
	const int32 size = Min(image.width(), image.height());
	return image.clipped((image.width() - size) / 2, (image.height() - size) / 2, size, size);
}

bool Swappable(int32 a, int32 b)
{
	return (a / 4 == b / 4 && Abs(a - b) == 1) || (a % 4 == b % 4 && Abs(a - b) == 4);
}

void Main()
{
	Graphics::SetBackground(ColorF(0.8, 0.9, 1.0));

	const int32 cellSize = 120;
	const Point offset(20, 40);
	const Texture texture(CreateSquareImage(), TextureDesc::Mipped);

	Optional<size_t> grabbed;
	Array<int32> pieces;
	for (int32 i = 0; i <= 15; ++i)
		pieces << i;
	
	Array<int32> offsets = { -4, -1, 1, 4 };
	{
		int32 pos15 = 15;

		for (int32 i = 0; i < 1000; ++i)
		{
			const int32 to = pos15 + offsets.choice();

			if (InRange(to, 0, 15) && Swappable(pos15, to))
			{
				std::swap(pieces[pos15], pieces[to]);
				pos15 = to;
			}
		}
	}

	while (System::Update())
	{
		Rect(offset, 4 * cellSize)
			.drawShadow(Vec2(0, 2), 12, 8)
			.draw(ColorF(0.25))
			.drawFrame(0, 8, ColorF(0.3, 0.5, 0.7));

		if (!MouseL.pressed())
		{
			grabbed.reset();
		}

		for (size_t i = 0; i < 16; ++i)
		{
			const int32 pieceID = pieces[i];
			const Rect rect = Rect(i % 4 * cellSize, i / 4 * cellSize, cellSize).movedBy(offset);

			if (pieceID == 15)
			{
				if (grabbed.has_value() && rect.mouseOver() && Swappable(i, grabbed.value()))
				{
					std::swap(pieces[i], pieces[grabbed.value()]);
					grabbed = i;
				}

				continue;
			}

			if (rect.leftClicked())
			{
				grabbed = i;
			}

			rect(texture.uv(pieceID % 4 * 0.25, pieceID / 4 * 0.25, 0.25, 0.25))
				.draw()
				.drawFrame(1, 0, ColorF(1.0, 0.75));

			if (grabbed.has_value() && grabbed.value() == i)
			{
				rect.draw(ColorF(1.0, 0.5, 0.0, 0.3));
			}

			if (rect.mouseOver())
			{
				Cursor::RequestStyle(CursorStyle::Hand);
			}
		}

		texture.resized(240)
			.draw(offset.x + cellSize * 4 + 24, offset.y)
			.drawFrame(0, 4, ColorF(0.3, 0.5, 0.7));
	}
}